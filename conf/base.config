/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    artic-network/amplicon-nf Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus          = { 1 * task.attempt }
    memory        = { 6.GB * task.attempt }
    time          = { 4.h * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104 + 175) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel: process_single {
        cpus   = { 1 }
        memory = { 6.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel: process_low {
        cpus   = { 2 * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel: process_medium {
        cpus   = { 6 * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = { 8.h * task.attempt }
    }
    withLabel: process_high {
        cpus   = { 12 * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = { 16.h * task.attempt }
    }
    withLabel: process_long {
        time = { 20.h * task.attempt }
    }
    withLabel: process_high_memory {
        memory = { 200.GB * task.attempt }
    }
    withLabel: error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withLabel: process_gpu {
        ext.use_gpu = { workflow.profile.contains('gpu') }
    }
    
    withName: ARTIC_GUPPYPLEX {
        memory     = { 8.GB * task.attempt }
        cpus       = 1
    }

    withName: ARTIC_MINION {
        memory     = { 16.GB * task.attempt }
    }

    withName: BWAMEM2_INDEX {
        memory = { (((28.B * fasta.size()) * task.attempt) >= 100.MB) ? (28.B * fasta.size()) * task.attempt : 100.MB * task.attempt }
    }

    withName: MAFFT_ALIGN {
        memory     = { 12.GB * task.attempt }
    }
}

profiles {
    low_resource {
        process {
            resourceLimits = [
                cpus: 4,
                memory: '15.GB',
                time: '1.h',
            ]
            maxForks       = 2
        }
    }
    lower_resource {
        process {
            resourceLimits = [
                cpus: 2,
                memory: '7.GB',
                time: '1.h',
            ]
            maxForks       = 1
        }
    }
}